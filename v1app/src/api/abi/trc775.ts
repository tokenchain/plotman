/* DO NOT EDIT THE BELOW FILE AS THIS IS LIKELY WILL BE GENERATED AGAIN AND REWRITE OVER IT */
// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming
// tslint:disable:whitespace no-unbound-method no-trailing-whitespace no-camelcase
// tslint:disable:no-unused-variable
import TronWeb, {BigNumber, version, Contract} from "tronweb"
import BaseContract from "./base/base"
import {ReqEventResult} from "abi/base/types";
// eslint-disable-next-line import/named
export interface CheckResultEventArgs {
    checker: string;
    found: BigNumber;
    size: BigNumber;
    amount: BigNumber;
}
export interface ClaimPaymentEventArgs {
    beneficiary: string;
    amount: BigNumber;
}
export interface DepositStakingEventArgs {
    _person: string;
    amount: BigNumber;
}
export interface DrawDismissEventArgs {
    checker: string;
    round: BigNumber;
}
export interface DripEventArgs {
    _caller: string;
    _amount: BigNumber;
}
export interface DurationUpdateEventArgs {
    _duration: BigNumber;
}
export interface FailedPaymentEventArgs {
    beneficiary: string;
    amount: BigNumber;
}
export interface FrequencyUpdateEventArgs {
    _frequency: BigNumber;
}
export interface GenesisContractUpdateEventArgs {
    _contract: string;
}
export interface GenesisPeriodCompleteEventArgs {
    _blocktime: BigNumber;
}
export interface IncentiveUpdateEventArgs {
    _incentiveAmount: BigNumber;
}
export interface LiquidityWithdrawEventArgs {
    _amount: BigNumber;
}
export interface MineWithdrawEventArgs {
    _amount: BigNumber;
}
export interface MiningTokenContractUpdateEventArgs {
    _contract: string;
}
export interface NetworkContractUpdateEventArgs {
    _contract: string;
}
export interface NetworkStakingTargetUpdateEventArgs {
    _amount: BigNumber;
}
export interface OwnershipTransferredEventArgs {
    previousOwner: string;
    newOwner: string;
}
export interface PurchaseTicketEventArgs {
    buyer: string;
    amount: BigNumber;
}
export interface ReferralPaymentEventArgs {
    beneficiary: string;
    amount: BigNumber;
}
export interface StakingContractUpdateEventArgs {
    _contract: string;
}
export interface TimerResetEventArgs {
    _startTime: BigNumber;
}
export interface TokenContractUpdateEventArgs {
    _contract: string;
}
export interface WinningNumbersEventArgs {
    openNum: BigNumber[];
}
export interface traillockEventArgs {
    value: BigNumber;
}

type Param = {
    type: string,
    value: any
}

export interface ContractInterface {
    SERVICE_FEE():Promise<BigNumber>
    addCroupier(account: string):Promise<void>
    addGovernor(account: string):Promise<void>
    addWhitelistAdmin(account: string):Promise<void>
    allTickets(index_0: string):Promise<[string, BigNumber, BigNumber, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber]>
    buyTicketTRC20(combo: string[], amount: string):Promise<void>
    changeSettings(hour: string, gMin: string, tktPrice: string):Promise<void>
    checkClaimed(ticketId: string):Promise<boolean>
    checkCompleteNewRound():Promise<void>
    checkExistAddress(up: string):Promise<boolean>
    claimBasic(ticket_id: string):Promise<void>
    claimTop(ticket_id: string):Promise<void>
    compareStr(src: string, src_compared: string):Promise<boolean>
    contractInvalidate():Promise<void>
    currentMaxClaim():Promise<BigNumber>
    depositFundsTrx(trx:number):Promise<void>
    difficulty():Promise<BigNumber>
    distributedRewards():Promise<BigNumber>
    drawWin():Promise<BigNumber>
    drip():Promise<BigNumber>
    dripFrequency():Promise<BigNumber>
    duration():Promise<BigNumber>
    endGenesisFunding():Promise<void>
    expectedMinPoolSizeUSDT():Promise<BigNumber>
    genesisCutoffBalance():Promise<BigNumber>
    incentiveAmount():Promise<BigNumber>
    initStakingModule(_duration: string, _frequency: string, _ratioTargetStakingUSD: string, _expectedPoolSizeUSD: string):Promise<void>
    installGenesis(m: string):Promise<void>
    installMiningToken(deploymentAddress: string):Promise<void>
    installNetworkContract(deploymentAddress: string):Promise<void>
    installTokenCurrency(deploymentAddress: string):Promise<void>
    isCroupier(account: string):Promise<boolean>
    isDripAvailable():Promise<boolean>
    isGovernor(account: string):Promise<boolean>
    isLocked():Promise<boolean>
    isOwner():Promise<boolean>
    isTimeEnded():Promise<boolean>
    isTimeStarted():Promise<boolean>
    isWhitelistAdmin(account: string):Promise<boolean>
    katana():Promise<void>
    lastDistributionTime():Promise<BigNumber>
    lock():Promise<void>
    minedRewards():Promise<BigNumber>
    networkStakingConstantUSDT():Promise<BigNumber>
    nextDripAvailable():Promise<BigNumber>
    owner():Promise<string>
    playerList():Promise<[string[], BigNumber[]]>
    playerTotal(_address: string):Promise<BigNumber>
    registeredFunds(index_0: string):Promise<BigNumber>
    registeredFundsTRC20(index_0: string):Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>
    releasedReward():Promise<BigNumber>
    remainingTime():Promise<BigNumber>
    removeCroupier(account: string):Promise<void>
    removeGovernor(account: string):Promise<void>
    removeWhitelistAdmin(account: string):Promise<void>
    renounceOwnership():Promise<void>
    rewardBalance():Promise<BigNumber>
    seeGenesis():Promise<string>
    seeMiningTokenAddress():Promise<string>
    seeNetworkAddress():Promise<string>
    seeTokenAddress():Promise<string>
    setDripFrequency(_frequency: string):Promise<void>
    setIncentiveAmount(_incentiveAmount: string):Promise<void>
    setNetworkStakingTarget(_u: string):Promise<void>
    shenzhen():Promise<[BigNumber[], boolean[]]>
    stakingDepositFund(amount: string):Promise<void>
    startTime():Promise<BigNumber>
    stringToBytes32(source: string):Promise<string>
    test_picks():Promise<BigNumber[]>
    test_rng():Promise<string>
    ticketKeys(index_0: string, index_1: string):Promise<BigNumber>
    tier():Promise<BigNumber>
    timeSinceStart():Promise<BigNumber>
    totalMiningSupply():Promise<BigNumber>
    totalReward():Promise<BigNumber>
    transferOwnership(newOwner: string):Promise<void>
    unlock():Promise<void>
    unreleasedReward():Promise<BigNumber>
    unstakeClaim():Promise<void>
    withdrawFundsTrx():Promise<void>
    withdrawMinerals():Promise<void>
    zjLimits(wtrx: string, sinktrx: string):Promise<void>
}

// @ts-ignore
export class TRC775 extends BaseContract implements ContractInterface {

public static deployedBytecode = "";
public static contractName = "TRC775";
    __debug:boolean = true;

    tronweb: TronWeb = null;
    contract: Contract;
    contract_address_t: string;
    based_version: string = version;

    constructor(tron: TronWeb) {
        super();
        this.tronweb = tron
    }

    public static Instance(): (TRC775 | any | boolean) {
        if (window && window.hasOwnProperty("___contract__TRC775__")) {
          // @ts-ignore
          const obj = window.___contract__TRC775__
          if (obj instanceof TRC775) {
            return (obj) as TRC775
          } else {
            return (obj) as TRC775
          }
        } else {
          return false
        }
    }

    async init(contract_address: string) {
        this.contract = await new Contract(this.tronweb, TRC775.ABI(), contract_address);
        /**this.contract = await this.tronweb.contract().new({
            abi:CONTRACT_ABI,
            bytecode: TRC775.deployedBytecode
        });**/
        this.contract_address_t = contract_address;
        if (window && !window.hasOwnProperty("___contract__TRC775__")) {
            // @ts-ignore
            window.___contract__TRC775__ = this
        }   
    }

    setDebug(bool:boolean){
        this.__debug = bool
    }

    public isVersionCompatible():boolean {
      return this.based_version === this.tronweb.version
    }


    // @ts-ignore
    public async SERVICE_FEE():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.SERVICE_FEE()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 SERVICE_FEE");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async addCroupier(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.addCroupier(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 addCroupier");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async addGovernor(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.addGovernor(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 addGovernor");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async addWhitelistAdmin(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.addWhitelistAdmin(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 addWhitelistAdmin");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async allTickets(index_0: string):Promise<[string, BigNumber, BigNumber, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber]>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.allTickets(index_0)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 allTickets");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async buyTicketTRC20(combo: string[], amount: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.buyTicketTRC20(combo, amount)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 buyTicketTRC20");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async changeSettings(hour: string, gMin: string, tktPrice: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.changeSettings(hour, gMin, tktPrice)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 changeSettings");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async checkClaimed(ticketId: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.checkClaimed(ticketId)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 checkClaimed");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async checkCompleteNewRound():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.checkCompleteNewRound()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 checkCompleteNewRound");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async checkExistAddress(up: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.checkExistAddress(up)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 checkExistAddress");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async claimBasic(ticket_id: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.claimBasic(ticket_id)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 claimBasic");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async claimTop(ticket_id: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.claimTop(ticket_id)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 claimTop");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async compareStr(src: string, src_compared: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.compareStr(src, src_compared)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 compareStr");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async contractInvalidate():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.contractInvalidate()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 contractInvalidate");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async currentMaxClaim():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.currentMaxClaim()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 currentMaxClaim");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async depositFundsTrx(trx:number):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  trx ,
        }
        let val = await this.contract.depositFundsTrx()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 depositFundsTrx");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async difficulty():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.difficulty()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 difficulty");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async distributedRewards():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.distributedRewards()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 distributedRewards");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async drawWin():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.drawWin()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 drawWin");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async drip():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.drip()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 drip");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async dripFrequency():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.dripFrequency()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 dripFrequency");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async duration():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.duration()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 duration");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async endGenesisFunding():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.endGenesisFunding()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 endGenesisFunding");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async expectedMinPoolSizeUSDT():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.expectedMinPoolSizeUSDT()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 expectedMinPoolSizeUSDT");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async genesisCutoffBalance():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.genesisCutoffBalance()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 genesisCutoffBalance");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async incentiveAmount():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.incentiveAmount()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 incentiveAmount");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async initStakingModule(_duration: string, _frequency: string, _ratioTargetStakingUSD: string, _expectedPoolSizeUSD: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.initStakingModule(_duration, _frequency, _ratioTargetStakingUSD, _expectedPoolSizeUSD)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 initStakingModule");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async installGenesis(m: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.installGenesis(m)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 installGenesis");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async installMiningToken(deploymentAddress: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.installMiningToken(deploymentAddress)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 installMiningToken");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async installNetworkContract(deploymentAddress: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.installNetworkContract(deploymentAddress)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 installNetworkContract");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async installTokenCurrency(deploymentAddress: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.installTokenCurrency(deploymentAddress)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 installTokenCurrency");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isCroupier(account: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isCroupier(account)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isCroupier");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isDripAvailable():Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isDripAvailable()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isDripAvailable");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isGovernor(account: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isGovernor(account)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isGovernor");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isLocked():Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isLocked()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isLocked");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isOwner():Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isOwner()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isOwner");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isTimeEnded():Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isTimeEnded()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isTimeEnded");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isTimeStarted():Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isTimeStarted()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isTimeStarted");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async isWhitelistAdmin(account: string):Promise<boolean>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.isWhitelistAdmin(account)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 isWhitelistAdmin");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async katana():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.katana()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 katana");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async lastDistributionTime():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.lastDistributionTime()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 lastDistributionTime");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async lock():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.lock()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 lock");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async minedRewards():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.minedRewards()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 minedRewards");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async networkStakingConstantUSDT():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.networkStakingConstantUSDT()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 networkStakingConstantUSDT");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async nextDripAvailable():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.nextDripAvailable()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 nextDripAvailable");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async owner():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.owner()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 owner");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async playerList():Promise<[string[], BigNumber[]]>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.playerList()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 playerList");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async playerTotal(_address: string):Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.playerTotal(_address)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 playerTotal");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async registeredFunds(index_0: string):Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.registeredFunds(index_0)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 registeredFunds");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async registeredFundsTRC20(index_0: string):Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.registeredFundsTRC20(index_0)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 registeredFundsTRC20");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async releasedReward():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.releasedReward()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 releasedReward");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async remainingTime():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.remainingTime()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 remainingTime");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async removeCroupier(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.removeCroupier(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 removeCroupier");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async removeGovernor(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.removeGovernor(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 removeGovernor");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async removeWhitelistAdmin(account: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.removeWhitelistAdmin(account)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 removeWhitelistAdmin");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async renounceOwnership():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.renounceOwnership()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 renounceOwnership");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async rewardBalance():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.rewardBalance()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 rewardBalance");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async seeGenesis():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.seeGenesis()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 seeGenesis");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async seeMiningTokenAddress():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.seeMiningTokenAddress()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 seeMiningTokenAddress");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async seeNetworkAddress():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.seeNetworkAddress()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 seeNetworkAddress");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async seeTokenAddress():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.seeTokenAddress()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 seeTokenAddress");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async setDripFrequency(_frequency: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.setDripFrequency(_frequency)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 setDripFrequency");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async setIncentiveAmount(_incentiveAmount: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.setIncentiveAmount(_incentiveAmount)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 setIncentiveAmount");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async setNetworkStakingTarget(_u: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.setNetworkStakingTarget(_u)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 setNetworkStakingTarget");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async shenzhen():Promise<[BigNumber[], boolean[]]>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.shenzhen()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 shenzhen");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async stakingDepositFund(amount: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.stakingDepositFund(amount)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 stakingDepositFund");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async startTime():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.startTime()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 startTime");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async stringToBytes32(source: string):Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.stringToBytes32(source)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 stringToBytes32");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async test_picks():Promise<BigNumber[]>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.test_picks()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 test_picks");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async test_rng():Promise<string>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.test_rng()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 test_rng");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async ticketKeys(index_0: string, index_1: string):Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.ticketKeys(index_0, index_1)
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 ticketKeys");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async tier():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.tier()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 tier");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async timeSinceStart():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.timeSinceStart()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 timeSinceStart");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async totalMiningSupply():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.totalMiningSupply()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 totalMiningSupply");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async totalReward():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.totalReward()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 totalReward");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async transferOwnership(newOwner: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.transferOwnership(newOwner)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 transferOwnership");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async unlock():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.unlock()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 unlock");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async unreleasedReward():Promise<BigNumber>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  true ,
            callValue:  0 ,
        }
        let val = await this.contract.unreleasedReward()
         .call(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 unreleasedReward");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async unstakeClaim():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.unstakeClaim()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 unstakeClaim");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async withdrawFundsTrx():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.withdrawFundsTrx()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 withdrawFundsTrx");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async withdrawMinerals():Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.withdrawMinerals()
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 withdrawMinerals");
            console.log(val);
            console.groupEnd();
        }
        return val
    }


    // @ts-ignore
    public async zjLimits(wtrx: string, sinktrx: string):Promise<void>{
        let callparams = {
            userFeePercentage: 30,
            feeLimit: 100000000,
            shouldPollResponse:true,
            _isConstant:  false ,
            callValue:  0 ,
        }
        let val = await this.contract.zjLimits(wtrx, sinktrx)
         .send(callparams) 
        ;

        if(this.__debug){
            console.group("==> debug return raw 💮 zjLimits");
            console.log(val);
            console.groupEnd();
        }
        return val
    }



    public async eventQ(event_name: string, page: number, since: number = 0): Promise<Array<ReqEventResult>> {
        const data = await this.tronweb && this.contract && this.tronweb.getEventResult(
            this.contract_address_t,
            since,
            event_name,
            0,
            20,
            page
        )
        return data
    }


    async startEventListeners():Promise<any> {
        // @ts-ignore
        await this.contract && this.contract.CheckResult().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_CheckResult", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.ClaimPayment().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_ClaimPayment", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.DepositStaking().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_DepositStaking", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.DrawDismiss().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_DrawDismiss", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.Drip().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_Drip", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.DurationUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_DurationUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.FailedPayment().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_FailedPayment", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.FrequencyUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_FrequencyUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.GenesisContractUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_GenesisContractUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.GenesisPeriodComplete().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_GenesisPeriodComplete", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.IncentiveUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_IncentiveUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.LiquidityWithdraw().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_LiquidityWithdraw", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.MineWithdraw().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_MineWithdraw", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.MiningTokenContractUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_MiningTokenContractUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.NetworkContractUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_NetworkContractUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.NetworkStakingTargetUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_NetworkStakingTargetUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.OwnershipTransferred().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_OwnershipTransferred", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.PurchaseTicket().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_PurchaseTicket", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.ReferralPayment().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_ReferralPayment", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.StakingContractUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_StakingContractUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.TimerReset().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_TimerReset", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.TokenContractUpdate().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_TokenContractUpdate", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.WinningNumbers().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_WinningNumbers", event_payload);
            }
        


        });
        // @ts-ignore
        await this.contract && this.contract.traillock().watch((err, event_payload) => {
            if (err) return console.error('Failed to bind event listener:', err);
    
            if(event_payload){
                let {result,block,transaction,name,contract} = event_payload;


       
                if (this.__debug){
                    console.group('New event received');
                    console.log('- Contract Address:', contract);
                    console.log('- Event Name:', name);
                    console.log('- Transaction:',transaction);
                    console.log('- Block number:', block);
                    console.log('- Result:', result, '\n');
                    console.groupEnd();
                }     
                this.emit("event_traillock", event_payload);
            }
        


        });
    }
   /**
     * @returns The contract ABI
     */
    public static ABI(): any {
        const abi = [
            { 
                inputs: [
                ],
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'constructor',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'checker',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'found',
                        type: 'uint8',
                        indexed: false,
                    },
                    {
                        name: 'size',
                        type: 'uint256',
                        indexed: false,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'CheckResult',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'beneficiary',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'ClaimPayment',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_person',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'DepositStaking',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'checker',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'round',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'DrawDismiss',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_caller',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: '_amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'Drip',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_duration',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'DurationUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'beneficiary',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'FailedPayment',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_frequency',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'FrequencyUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_contract',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'GenesisContractUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_blocktime',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'GenesisPeriodComplete',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_incentiveAmount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'IncentiveUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'LiquidityWithdraw',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'MineWithdraw',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_contract',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'MiningTokenContractUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_contract',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'NetworkContractUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'NetworkStakingTargetUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'previousOwner',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'newOwner',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'OwnershipTransferred',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'buyer',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'PurchaseTicket',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'beneficiary',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'ReferralPayment',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_contract',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'StakingContractUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_startTime',
                        type: 'uint256',
                        indexed: false,
                    },
                ],
                name: 'TimerReset',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: '_contract',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'TokenContractUpdate',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'openNum',
                        type: 'uint8[7]',
                        indexed: false,
                    },
                ],
                name: 'WinningNumbers',
                outputs: [
                ],
                type: 'event',
            },
            { 
                anonymous: false,
                inputs: [
                    {
                        name: 'value',
                        type: 'uint8',
                        indexed: false,
                    },
                ],
                name: 'traillock',
                outputs: [
                ],
                type: 'event',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'SERVICE_FEE',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'addCroupier',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'addGovernor',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'addWhitelistAdmin',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'uint256',
                    },
                ],
                name: 'allTickets',
                outputs: [
                    {
                        name: 'playerAddress',
                        type: 'address',
                    },
                    {
                        name: 'price',
                        type: 'uint256',
                    },
                    {
                        name: 'inRound',
                        type: 'uint48',
                    },
                    {
                        name: 'checked',
                        type: 'bool',
                    },
                    {
                        name: 'isTopPrize',
                        type: 'bool',
                    },
                    {
                        name: 'claimed',
                        type: 'bool',
                    },
                    {
                        name: 'hits',
                        type: 'uint8',
                    },
                    {
                        name: 'unclaimFactor',
                        type: 'uint256',
                    },
                    {
                        name: 'unclaimTotal',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'combo',
                        type: 'uint8[]',
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                    },
                ],
                name: 'buyTicketTRC20',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'hour',
                        type: 'uint256',
                    },
                    {
                        name: 'gMin',
                        type: 'uint256',
                    },
                    {
                        name: 'tktPrice',
                        type: 'uint256',
                    },
                ],
                name: 'changeSettings',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'ticketId',
                        type: 'uint256',
                    },
                ],
                name: 'checkClaimed',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'checkCompleteNewRound',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'up',
                        type: 'address',
                    },
                ],
                name: 'checkExistAddress',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'ticket_id',
                        type: 'uint256',
                    },
                ],
                name: 'claimBasic',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'ticket_id',
                        type: 'uint256',
                    },
                ],
                name: 'claimTop',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'src',
                        type: 'string',
                    },
                    {
                        name: 'src_compared',
                        type: 'string',
                    },
                ],
                name: 'compareStr',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'pure',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'contractInvalidate',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'currentMaxClaim',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'depositFundsTrx',
                outputs: [
                ],
                payable: true,
                stateMutability: 'payable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'difficulty',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'distributedRewards',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'drawWin',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'drip',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'dripFrequency',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'duration',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'endGenesisFunding',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'expectedMinPoolSizeUSDT',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'genesisCutoffBalance',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'incentiveAmount',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: '_duration',
                        type: 'uint256',
                    },
                    {
                        name: '_frequency',
                        type: 'uint256',
                    },
                    {
                        name: '_ratioTargetStakingUSD',
                        type: 'uint256',
                    },
                    {
                        name: '_expectedPoolSizeUSD',
                        type: 'uint256',
                    },
                ],
                name: 'initStakingModule',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'm',
                        type: 'address',
                    },
                ],
                name: 'installGenesis',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'deploymentAddress',
                        type: 'address',
                    },
                ],
                name: 'installMiningToken',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'deploymentAddress',
                        type: 'address',
                    },
                ],
                name: 'installNetworkContract',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'deploymentAddress',
                        type: 'address',
                    },
                ],
                name: 'installTokenCurrency',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'isCroupier',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'isDripAvailable',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'isGovernor',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'isLocked',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'isOwner',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'isTimeEnded',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'isTimeStarted',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'isWhitelistAdmin',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'katana',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'lastDistributionTime',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'lock',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'minedRewards',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'networkStakingConstantUSDT',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'nextDripAvailable',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'owner',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'playerList',
                outputs: [
                    {
                        name: '_addresses',
                        type: 'address[]',
                    },
                    {
                        name: '_values',
                        type: 'uint256[]',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: '_address',
                        type: 'address',
                    },
                ],
                name: 'playerTotal',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'address',
                    },
                ],
                name: 'registeredFunds',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'address',
                    },
                ],
                name: 'registeredFundsTRC20',
                outputs: [
                    {
                        name: 'staking',
                        type: 'uint256',
                    },
                    {
                        name: 'reward',
                        type: 'uint256',
                    },
                    {
                        name: 'claimed',
                        type: 'uint256',
                    },
                    {
                        name: 'mining',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'releasedReward',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'remainingTime',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'removeCroupier',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'removeGovernor',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'removeWhitelistAdmin',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'renounceOwnership',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'rewardBalance',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'seeGenesis',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'seeMiningTokenAddress',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'seeNetworkAddress',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'seeTokenAddress',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: '_frequency',
                        type: 'uint256',
                    },
                ],
                name: 'setDripFrequency',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: '_incentiveAmount',
                        type: 'uint256',
                    },
                ],
                name: 'setIncentiveAmount',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: '_u',
                        type: 'uint256',
                    },
                ],
                name: 'setNetworkStakingTarget',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'shenzhen',
                outputs: [
                    {
                        name: 'lottoInfo',
                        type: 'uint256[14]',
                    },
                    {
                        name: 'flags',
                        type: 'bool[4]',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'amount',
                        type: 'uint256',
                    },
                ],
                name: 'stakingDepositFund',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'startTime',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'source',
                        type: 'string',
                    },
                ],
                name: 'stringToBytes32',
                outputs: [
                    {
                        name: 'result',
                        type: 'bytes32',
                    },
                ],
                payable: false,
                stateMutability: 'pure',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'test_picks',
                outputs: [
                    {
                        name: 'pickList',
                        type: 'uint8[7]',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'test_rng',
                outputs: [
                    {
                        name: '',
                        type: 'bytes32',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'address',
                    },
                    {
                        name: 'index_1',
                        type: 'uint256',
                    },
                ],
                name: 'ticketKeys',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'tier',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'timeSinceStart',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'totalMiningSupply',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'totalReward',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'newOwner',
                        type: 'address',
                    },
                ],
                name: 'transferOwnership',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'unlock',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: true,
                inputs: [
                ],
                name: 'unreleasedReward',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'unstakeClaim',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'withdrawFundsTrx',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                ],
                name: 'withdrawMinerals',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            { 
                constant: false,
                inputs: [
                    {
                        name: 'wtrx',
                        type: 'uint256',
                    },
                    {
                        name: 'sinktrx',
                        type: 'uint256',
                    },
                ],
                name: 'zjLimits',
                outputs: [
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
        ];
        return abi;
    }
}